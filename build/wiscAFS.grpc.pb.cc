// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wiscAFS.proto

#include "wiscAFS.pb.h"
#include "wiscAFS.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace wiscAFS {

static const char* WiscAFS_method_names[] = {
  "/wiscAFS.WiscAFS/GetAttr",
  "/wiscAFS.WiscAFS/Open",
  "/wiscAFS.WiscAFS/Read",
  "/wiscAFS.WiscAFS/Write",
  "/wiscAFS.WiscAFS/ReadDir",
  "/wiscAFS.WiscAFS/MkDir",
  "/wiscAFS.WiscAFS/RmDir",
  "/wiscAFS.WiscAFS/SayHello",
};

std::unique_ptr< WiscAFS::Stub> WiscAFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WiscAFS::Stub> stub(new WiscAFS::Stub(channel, options));
  return stub;
}

WiscAFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAttr_(WiscAFS_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(WiscAFS_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Read_(WiscAFS_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Write_(WiscAFS_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ReadDir_(WiscAFS_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MkDir_(WiscAFS_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RmDir_(WiscAFS_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SayHello_(WiscAFS_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WiscAFS::Stub::GetAttr(::grpc::ClientContext* context, const ::wiscAFS::GetAttrReq& request, ::wiscAFS::GetAttrReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wiscAFS::GetAttrReq, ::wiscAFS::GetAttrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAttr_, context, request, response);
}

void WiscAFS::Stub::async::GetAttr(::grpc::ClientContext* context, const ::wiscAFS::GetAttrReq* request, ::wiscAFS::GetAttrReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wiscAFS::GetAttrReq, ::wiscAFS::GetAttrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAttr_, context, request, response, std::move(f));
}

void WiscAFS::Stub::async::GetAttr(::grpc::ClientContext* context, const ::wiscAFS::GetAttrReq* request, ::wiscAFS::GetAttrReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAttr_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::GetAttrReply>* WiscAFS::Stub::PrepareAsyncGetAttrRaw(::grpc::ClientContext* context, const ::wiscAFS::GetAttrReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wiscAFS::GetAttrReply, ::wiscAFS::GetAttrReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAttr_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::GetAttrReply>* WiscAFS::Stub::AsyncGetAttrRaw(::grpc::ClientContext* context, const ::wiscAFS::GetAttrReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAttrRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WiscAFS::Stub::Open(::grpc::ClientContext* context, const ::wiscAFS::OpenReq& request, ::wiscAFS::OpenReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wiscAFS::OpenReq, ::wiscAFS::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Open_, context, request, response);
}

void WiscAFS::Stub::async::Open(::grpc::ClientContext* context, const ::wiscAFS::OpenReq* request, ::wiscAFS::OpenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wiscAFS::OpenReq, ::wiscAFS::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void WiscAFS::Stub::async::Open(::grpc::ClientContext* context, const ::wiscAFS::OpenReq* request, ::wiscAFS::OpenReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::OpenReply>* WiscAFS::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::wiscAFS::OpenReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wiscAFS::OpenReply, ::wiscAFS::OpenReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Open_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::OpenReply>* WiscAFS::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::wiscAFS::OpenReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOpenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::wiscAFS::ReadReply>* WiscAFS::Stub::ReadRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::wiscAFS::ReadReply>::Create(channel_.get(), rpcmethod_Read_, context, request);
}

void WiscAFS::Stub::async::Read(::grpc::ClientContext* context, const ::wiscAFS::ReadReq* request, ::grpc::ClientReadReactor< ::wiscAFS::ReadReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::wiscAFS::ReadReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Read_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::wiscAFS::ReadReply>* WiscAFS::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wiscAFS::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::wiscAFS::ReadReply>* WiscAFS::Stub::PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wiscAFS::ReadReply>::Create(channel_.get(), cq, rpcmethod_Read_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::wiscAFS::WriteReq>* WiscAFS::Stub::WriteRaw(::grpc::ClientContext* context, ::wiscAFS::WriteReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::wiscAFS::WriteReq>::Create(channel_.get(), rpcmethod_Write_, context, response);
}

void WiscAFS::Stub::async::Write(::grpc::ClientContext* context, ::wiscAFS::WriteReply* response, ::grpc::ClientWriteReactor< ::wiscAFS::WriteReq>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::wiscAFS::WriteReq>::Create(stub_->channel_.get(), stub_->rpcmethod_Write_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::wiscAFS::WriteReq>* WiscAFS::Stub::AsyncWriteRaw(::grpc::ClientContext* context, ::wiscAFS::WriteReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::wiscAFS::WriteReq>::Create(channel_.get(), cq, rpcmethod_Write_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::wiscAFS::WriteReq>* WiscAFS::Stub::PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::wiscAFS::WriteReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::wiscAFS::WriteReq>::Create(channel_.get(), cq, rpcmethod_Write_, context, response, false, nullptr);
}

::grpc::ClientReader< ::wiscAFS::ReadDirReply>* WiscAFS::Stub::ReadDirRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadDirReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::wiscAFS::ReadDirReply>::Create(channel_.get(), rpcmethod_ReadDir_, context, request);
}

void WiscAFS::Stub::async::ReadDir(::grpc::ClientContext* context, const ::wiscAFS::ReadDirReq* request, ::grpc::ClientReadReactor< ::wiscAFS::ReadDirReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::wiscAFS::ReadDirReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ReadDir_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::wiscAFS::ReadDirReply>* WiscAFS::Stub::AsyncReadDirRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadDirReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wiscAFS::ReadDirReply>::Create(channel_.get(), cq, rpcmethod_ReadDir_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::wiscAFS::ReadDirReply>* WiscAFS::Stub::PrepareAsyncReadDirRaw(::grpc::ClientContext* context, const ::wiscAFS::ReadDirReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::wiscAFS::ReadDirReply>::Create(channel_.get(), cq, rpcmethod_ReadDir_, context, request, false, nullptr);
}

::grpc::Status WiscAFS::Stub::MkDir(::grpc::ClientContext* context, const ::wiscAFS::MkDirReq& request, ::wiscAFS::MkDirReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wiscAFS::MkDirReq, ::wiscAFS::MkDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MkDir_, context, request, response);
}

void WiscAFS::Stub::async::MkDir(::grpc::ClientContext* context, const ::wiscAFS::MkDirReq* request, ::wiscAFS::MkDirReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wiscAFS::MkDirReq, ::wiscAFS::MkDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MkDir_, context, request, response, std::move(f));
}

void WiscAFS::Stub::async::MkDir(::grpc::ClientContext* context, const ::wiscAFS::MkDirReq* request, ::wiscAFS::MkDirReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MkDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::MkDirReply>* WiscAFS::Stub::PrepareAsyncMkDirRaw(::grpc::ClientContext* context, const ::wiscAFS::MkDirReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wiscAFS::MkDirReply, ::wiscAFS::MkDirReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MkDir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::MkDirReply>* WiscAFS::Stub::AsyncMkDirRaw(::grpc::ClientContext* context, const ::wiscAFS::MkDirReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMkDirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WiscAFS::Stub::RmDir(::grpc::ClientContext* context, const ::wiscAFS::RmDirReq& request, ::wiscAFS::RmDirReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wiscAFS::RmDirReq, ::wiscAFS::RmDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RmDir_, context, request, response);
}

void WiscAFS::Stub::async::RmDir(::grpc::ClientContext* context, const ::wiscAFS::RmDirReq* request, ::wiscAFS::RmDirReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wiscAFS::RmDirReq, ::wiscAFS::RmDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RmDir_, context, request, response, std::move(f));
}

void WiscAFS::Stub::async::RmDir(::grpc::ClientContext* context, const ::wiscAFS::RmDirReq* request, ::wiscAFS::RmDirReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RmDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::RmDirReply>* WiscAFS::Stub::PrepareAsyncRmDirRaw(::grpc::ClientContext* context, const ::wiscAFS::RmDirReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wiscAFS::RmDirReply, ::wiscAFS::RmDirReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RmDir_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::RmDirReply>* WiscAFS::Stub::AsyncRmDirRaw(::grpc::ClientContext* context, const ::wiscAFS::RmDirReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRmDirRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WiscAFS::Stub::SayHello(::grpc::ClientContext* context, const ::wiscAFS::HelloRequest& request, ::wiscAFS::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::wiscAFS::HelloRequest, ::wiscAFS::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void WiscAFS::Stub::async::SayHello(::grpc::ClientContext* context, const ::wiscAFS::HelloRequest* request, ::wiscAFS::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::wiscAFS::HelloRequest, ::wiscAFS::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void WiscAFS::Stub::async::SayHello(::grpc::ClientContext* context, const ::wiscAFS::HelloRequest* request, ::wiscAFS::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::HelloReply>* WiscAFS::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::wiscAFS::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::wiscAFS::HelloReply, ::wiscAFS::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::wiscAFS::HelloReply>* WiscAFS::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::wiscAFS::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

WiscAFS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WiscAFS::Service, ::wiscAFS::GetAttrReq, ::wiscAFS::GetAttrReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::GetAttrReq* req,
             ::wiscAFS::GetAttrReply* resp) {
               return service->GetAttr(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WiscAFS::Service, ::wiscAFS::OpenReq, ::wiscAFS::OpenReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::OpenReq* req,
             ::wiscAFS::OpenReply* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WiscAFS::Service, ::wiscAFS::ReadReq, ::wiscAFS::ReadReply>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::ReadReq* req,
             ::grpc::ServerWriter<::wiscAFS::ReadReply>* writer) {
               return service->Read(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< WiscAFS::Service, ::wiscAFS::WriteReq, ::wiscAFS::WriteReply>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::wiscAFS::WriteReq>* reader,
             ::wiscAFS::WriteReply* resp) {
               return service->Write(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WiscAFS::Service, ::wiscAFS::ReadDirReq, ::wiscAFS::ReadDirReply>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::ReadDirReq* req,
             ::grpc::ServerWriter<::wiscAFS::ReadDirReply>* writer) {
               return service->ReadDir(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WiscAFS::Service, ::wiscAFS::MkDirReq, ::wiscAFS::MkDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::MkDirReq* req,
             ::wiscAFS::MkDirReply* resp) {
               return service->MkDir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WiscAFS::Service, ::wiscAFS::RmDirReq, ::wiscAFS::RmDirReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::RmDirReq* req,
             ::wiscAFS::RmDirReply* resp) {
               return service->RmDir(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WiscAFS_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WiscAFS::Service, ::wiscAFS::HelloRequest, ::wiscAFS::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WiscAFS::Service* service,
             ::grpc::ServerContext* ctx,
             const ::wiscAFS::HelloRequest* req,
             ::wiscAFS::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
}

WiscAFS::Service::~Service() {
}

::grpc::Status WiscAFS::Service::GetAttr(::grpc::ServerContext* context, const ::wiscAFS::GetAttrReq* request, ::wiscAFS::GetAttrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::Open(::grpc::ServerContext* context, const ::wiscAFS::OpenReq* request, ::wiscAFS::OpenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::Read(::grpc::ServerContext* context, const ::wiscAFS::ReadReq* request, ::grpc::ServerWriter< ::wiscAFS::ReadReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::Write(::grpc::ServerContext* context, ::grpc::ServerReader< ::wiscAFS::WriteReq>* reader, ::wiscAFS::WriteReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::ReadDir(::grpc::ServerContext* context, const ::wiscAFS::ReadDirReq* request, ::grpc::ServerWriter< ::wiscAFS::ReadDirReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::MkDir(::grpc::ServerContext* context, const ::wiscAFS::MkDirReq* request, ::wiscAFS::MkDirReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::RmDir(::grpc::ServerContext* context, const ::wiscAFS::RmDirReq* request, ::wiscAFS::RmDirReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WiscAFS::Service::SayHello(::grpc::ServerContext* context, const ::wiscAFS::HelloRequest* request, ::wiscAFS::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wiscAFS

